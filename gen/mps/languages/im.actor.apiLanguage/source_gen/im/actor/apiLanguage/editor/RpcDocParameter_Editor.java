package im.actor.apiLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.openapi.editor.style.StyleRegistry;
import jetbrains.mps.nodeEditor.MPSColors;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;

public class RpcDocParameter_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_atf40r_a(editorContext, node);
  }

  private EditorCell createCollection_atf40r_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_atf40r_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_atf40r_a0(editorContext, node));
    if (renderingCondition_atf40r_a1a(node, editorContext)) {
      editorCell.addEditorCell(this.createConstant_atf40r_b0(editorContext, node));
    }
    if (renderingCondition_atf40r_a2a(node, editorContext)) {
      editorCell.addEditorCell(this.createConstant_atf40r_c0(editorContext, node));
    }
    if (renderingCondition_atf40r_a3a(node, editorContext)) {
      editorCell.addEditorCell(this.createConstant_atf40r_d0(editorContext, node));
    }
    if (renderingCondition_atf40r_a4a(node, editorContext)) {
      editorCell.addEditorCell(this.createConstant_atf40r_e0(editorContext, node));
    }
    editorCell.addEditorCell(this.createProperty_atf40r_f0(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_atf40r_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "# param");
    editorCell.setCellId("Constant_atf40r_a0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.TEXT_COLOR, StyleRegistry.getInstance().getSimpleColor(MPSColors.DARK_GREEN));
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_atf40r_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "hidden");
    editorCell.setCellId("Constant_atf40r_b0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.TEXT_COLOR, StyleRegistry.getInstance().getSimpleColor(MPSColors.DARK_GREEN));
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }

  private static boolean renderingCondition_atf40r_a1a(SNode node, EditorContext editorContext) {
    return SPropertyOperations.hasValue(node, "logLevel", "hidden", "hidden");
  }

  private EditorCell createConstant_atf40r_c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "visible");
    editorCell.setCellId("Constant_atf40r_c0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.TEXT_COLOR, StyleRegistry.getInstance().getSimpleColor(MPSColors.DARK_GREEN));
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }

  private static boolean renderingCondition_atf40r_a2a(SNode node, EditorContext editorContext) {
    return SPropertyOperations.hasValue(node, "logLevel", "full", "hidden");
  }

  private EditorCell createConstant_atf40r_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "compact");
    editorCell.setCellId("Constant_atf40r_d0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.TEXT_COLOR, StyleRegistry.getInstance().getSimpleColor(MPSColors.DARK_GREEN));
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }

  private static boolean renderingCondition_atf40r_a3a(SNode node, EditorContext editorContext) {
    return SPropertyOperations.hasValue(node, "logLevel", "compact", "hidden");
  }

  private EditorCell createConstant_atf40r_e0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "danger");
    editorCell.setCellId("Constant_atf40r_e0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.TEXT_COLOR, StyleRegistry.getInstance().getSimpleColor(MPSColors.red));
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }

  private static boolean renderingCondition_atf40r_a4a(SNode node, EditorContext editorContext) {
    return SPropertyOperations.hasValue(node, "logLevel", "danger", "hidden");
  }

  private EditorCell createProperty_atf40r_f0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("description");
    provider.setNoTargetText("<no description>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_description");
    Style style = new StyleImpl();
    style.set(StyleAttributes.TEXT_COLOR, StyleRegistry.getInstance().getSimpleColor(MPSColors.DARK_GREEN));
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
}
